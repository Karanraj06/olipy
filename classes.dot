digraph "classes" {
rankdir=BT
charset="utf-8"
".merged_py_file.Alphabet" [color="black", fontcolor="black", label=<{.merged_py_file.Alphabet|AFRICAN_S : list<br ALIGN="LEFT"/>ALL_LANGUAGE_ALPHABETS_S<br ALIGN="LEFT"/>AMERICAN_S : list<br ALIGN="LEFT"/>ARABIC : list<br ALIGN="LEFT"/>ARABIC_FULL : list<br ALIGN="LEFT"/>ARABIC_WITH_PRESENTATION_FORMS : list<br ALIGN="LEFT"/>ASCII : str<br ALIGN="LEFT"/>BLOCK_MOSAIC : str<br ALIGN="LEFT"/>BOX_DRAWING_ARC_MOSAIC : str<br ALIGN="LEFT"/>BOX_DRAWING_HEAVY_MOSAIC : str<br ALIGN="LEFT"/>BOX_DRAWING_MOSAIC : str<br ALIGN="LEFT"/>CENTRAL_ASIAN_S : list<br ALIGN="LEFT"/>CHARACTER_CELL_DIAGONAL_MOSAIC : str<br ALIGN="LEFT"/>CIRCLES : str<br ALIGN="LEFT"/>CUSTOM_S : list<br ALIGN="LEFT"/>CYRILLIC : list<br ALIGN="LEFT"/>CYRILLIC_FULL : list<br ALIGN="LEFT"/>CYRILLIC_S : list<br ALIGN="LEFT"/>DEVANAGARI : list<br ALIGN="LEFT"/>DEVANAGARI_EXTENDED : list<br ALIGN="LEFT"/>DIACRITICAL : list<br ALIGN="LEFT"/>DIACRITICAL_FULL : list<br ALIGN="LEFT"/>DOTS : str<br ALIGN="LEFT"/>DOT_CHARSET_S : list<br ALIGN="LEFT"/>DOWN_POINTING_TRIANGLES : str<br ALIGN="LEFT"/>EAST_ASIAN_S : list<br ALIGN="LEFT"/>EMOJI_S : list<br ALIGN="LEFT"/>ETHIOPIC : list<br ALIGN="LEFT"/>ETHIOPIC_FULL : list<br ALIGN="LEFT"/>EUROPEAN_S : list<br ALIGN="LEFT"/>FILL_MOSAIC : str<br ALIGN="LEFT"/>GAMING_ALPHABETS : list<br ALIGN="LEFT"/>GEOMETRIC_ALPHABETS : list<br ALIGN="LEFT"/>GLITCHES : list<br ALIGN="LEFT"/>HANGUL_JAMO : list<br ALIGN="LEFT"/>HANGUL_JAMO_WITH_COMPATIBILITY : list<br ALIGN="LEFT"/>HEBREW : list<br ALIGN="LEFT"/>HEBREW_WITH_PRESENTATION_FORMS : list<br ALIGN="LEFT"/>HORIZONTAL_BLOCK_MOSAIC : str<br ALIGN="LEFT"/>KATAKANA : list<br ALIGN="LEFT"/>KATAKANA_ALL : list<br ALIGN="LEFT"/>KHMER : list<br ALIGN="LEFT"/>KHMER_WITH_SYMBOLS : list<br ALIGN="LEFT"/>LATIN_1 : list<br ALIGN="LEFT"/>LATIN_EXTRAS : list<br ALIGN="LEFT"/>LATIN_FULL : list<br ALIGN="LEFT"/>LATIN_S : list<br ALIGN="LEFT"/>LEFT_POINTING_TRIANGLES : str<br ALIGN="LEFT"/>MIDDLE_EASTERN_S : list<br ALIGN="LEFT"/>MODIFIERS : list<br ALIGN="LEFT"/>MOSAIC_CHARSET_S : list<br ALIGN="LEFT"/>MULTI_DOTS : str<br ALIGN="LEFT"/>MULTI_DOTS_DIAGONAL : str<br ALIGN="LEFT"/>MULTI_DOTS_HORIZONTAL : str<br ALIGN="LEFT"/>MULTI_DOTS_MISC : str<br ALIGN="LEFT"/>MULTI_DOTS_VERTICAL : str<br ALIGN="LEFT"/>MYANMAR : list<br ALIGN="LEFT"/>MYANMAR_EXTENDED : list<br ALIGN="LEFT"/>ONE_DOT : str<br ALIGN="LEFT"/>PARTIALLY_FILLED_CIRCLE_MOSAIC : str<br ALIGN="LEFT"/>PARTIALLY_FILLED_SQUARE_MOSAIC : str<br ALIGN="LEFT"/>PARTIALLY_FILLED_SQUARE_MOSAIC_DIAGONALS_ONLY : str<br ALIGN="LEFT"/>PENTAGONS_AND_LARGER_POLYGONS : str<br ALIGN="LEFT"/>PHILLIPINE_S : list<br ALIGN="LEFT"/>QUADRILATERALS : str<br ALIGN="LEFT"/>RECTANGLES : str<br ALIGN="LEFT"/>RIGHT_POINTING_TRIANGLES : str<br ALIGN="LEFT"/>SHADING_MOSAIC : str<br ALIGN="LEFT"/>SHAPE_CHARSET_S : list<br ALIGN="LEFT"/>SOUTHEAST_ASIAN_S : list<br ALIGN="LEFT"/>SOUTH_ASIAN_S : list<br ALIGN="LEFT"/>SYMBOLIC_ALPHABETS : list<br ALIGN="LEFT"/>TERMINAL_GRAPHIC_MOSAIC : str<br ALIGN="LEFT"/>TILABLE_CHARSET_S : list<br ALIGN="LEFT"/>TRIANGLES : str<br ALIGN="LEFT"/>TRIANGLE_MOSAIC : str<br ALIGN="LEFT"/>TWO_DOTS : str<br ALIGN="LEFT"/>TWO_DOTS_DIAGONAL : str<br ALIGN="LEFT"/>TWO_DOTS_HORIZONTAL : str<br ALIGN="LEFT"/>TWO_DOTS_VERTICAL : str<br ALIGN="LEFT"/>UCAS : str<br ALIGN="LEFT"/>UCAS_ALL : list<br ALIGN="LEFT"/>UP_POINTING_TRIANGLES : str<br ALIGN="LEFT"/>VERTICAL_BLOCK_MOSAIC : str<br ALIGN="LEFT"/>WEIRD_TWITTER_CJK : list<br ALIGN="LEFT"/>WEIRD_TWITTER_CJK_MIXINS : list<br ALIGN="LEFT"/>WEIRD_TWITTER_JAPANESE : list<br ALIGN="LEFT"/>WEIRD_TWITTER_JAPANESE_MIXINS : list<br ALIGN="LEFT"/>WEIRD_TWITTER_LATIN : list<br ALIGN="LEFT"/>WEIRD_TWITTER_LATIN_MIXINS : list<br ALIGN="LEFT"/>WEIRD_TWITTER_MATH : list<br ALIGN="LEFT"/>WEIRD_TWITTER_MATH_MIXINS : list<br ALIGN="LEFT"/>WHITESPACE : str<br ALIGN="LEFT"/>YIJING : list<br ALIGN="LEFT"/>by_name : dict<br ALIGN="LEFT"/>|characters(alphabets)<br ALIGN="LEFT"/>default()<br ALIGN="LEFT"/>random_choice()<br ALIGN="LEFT"/>random_choice_no_modifiers(minimum_size)<br ALIGN="LEFT"/>random_modifier()<br ALIGN="LEFT"/>random_whitespace()<br ALIGN="LEFT"/>subset(alphabet, how_many_characters)<br ALIGN="LEFT"/>unicode_charset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.AlternateSpellingGibberish" [color="black", fontcolor="black", label=<{.merged_py_file.AlternateSpellingGibberish|base_string<br ALIGN="LEFT"/>|tweet()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.Assembler" [color="black", fontcolor="black", label=<{.merged_py_file.Assembler|items : list<br ALIGN="LEFT"/>lengths : list<br ALIGN="LEFT"/>tokens_by_position : dict<br ALIGN="LEFT"/>|add(item, tokens_in)<br ALIGN="LEFT"/>assemble(pattern, length, min_length)<br ALIGN="LEFT"/>bucket_for_position(position, code, so_far)<br ALIGN="LEFT"/>dump(f, compress)<br ALIGN="LEFT"/>dumps(compress)<br ALIGN="LEFT"/>empty_bucket()<br ALIGN="LEFT"/>expand_pattern(pattern, length)<br ALIGN="LEFT"/>load(f, tokens_in)<br ALIGN="LEFT"/>loadlines(f, tokens_in)<br ALIGN="LEFT"/>loadlist(l, tokens_in)<br ALIGN="LEFT"/>loads(s)<br ALIGN="LEFT"/>token_bucket(token)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.Audio" [color="black", fontcolor="black", label=<{.merged_py_file.Audio|MEDIA_TYPE : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
".merged_py_file.BracketMatchingMarkovGenerator" [color="black", fontcolor="black", label=<{.merged_py_file.BracketMatchingMarkovGenerator|stack : list<br ALIGN="LEFT"/>useful_tokens : set<br ALIGN="LEFT"/>|assemble()<br ALIGN="LEFT"/>modify(token_to_yield)<br ALIGN="LEFT"/>tokenize(text)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.CheatCodeGibberish" [color="black", fontcolor="black", label=<{.merged_py_file.CheatCodeGibberish|base_charset : str<br ALIGN="LEFT"/>fighting_game_charset : str<br ALIGN="LEFT"/>nes_charset : str<br ALIGN="LEFT"/>|tweet()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.CompositeGibberish" [color="black", fontcolor="black", label=<{.merged_py_file.CompositeGibberish|SEPARATORS : str<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>|words(length)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.CorpusLoader" [color="black", fontcolor="black", label=<{.merged_py_file.CorpusLoader|children<br ALIGN="LEFT"/>directories : list<br ALIGN="LEFT"/>names<br ALIGN="LEFT"/>|get_categories()<br ALIGN="LEFT"/>get_file()<br ALIGN="LEFT"/>get_files()<br ALIGN="LEFT"/>search(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.EbooksQuotes" [color="black", fontcolor="black", label=<{.merged_py_file.EbooksQuotes|BEGINNING_CRUFT<br ALIGN="LEFT"/>COMMON_STARTING_WORDS : list<br ALIGN="LEFT"/>ONE_LETTER<br ALIGN="LEFT"/>ONE_WORD<br ALIGN="LEFT"/>PART_OF_SPEECH_SCORE_MULTIPLIERS : dict<br ALIGN="LEFT"/>PUNCTUATION_AND_COMMON_STARTING_WORD<br ALIGN="LEFT"/>SEVERAL_CAPITALIZED_WORDS<br ALIGN="LEFT"/>TOKENIZER<br ALIGN="LEFT"/>data : list<br ALIGN="LEFT"/>keywords<br ALIGN="LEFT"/>maximum_quote_size : int<br ALIGN="LEFT"/>minimum_quote_size : int<br ALIGN="LEFT"/>probability : float<br ALIGN="LEFT"/>truncate_chance : float<br ALIGN="LEFT"/>wrap_at : int<br ALIGN="LEFT"/>|one_sentence_from(quote)<br ALIGN="LEFT"/>quotes_in(paragraph)<br ALIGN="LEFT"/>rate(s, base_score, frequencies, obscurity_cutoff)<br ALIGN="LEFT"/>remove_beginning_punctuation(string)<br ALIGN="LEFT"/>remove_ending_punctuation(string)<br ALIGN="LEFT"/>truncate_at_stopword(string)<br ALIGN="LEFT"/>truncate_to_common_word(text)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.EmoticonGibberish" [color="black", fontcolor="black", label=<{.merged_py_file.EmoticonGibberish|charsets : NoneType, str<br ALIGN="LEFT"/>mouths : str<br ALIGN="LEFT"/>|tweet()<br ALIGN="LEFT"/>word(word_length)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.GameBoardGibberish" [color="black", fontcolor="black", label=<{.merged_py_file.GameBoardGibberish|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
".merged_py_file.Gibberish" [color="black", fontcolor="black", label=<{.merged_py_file.Gibberish|can_truncate : bool<br ALIGN="LEFT"/>charset<br ALIGN="LEFT"/>end_with : NoneType<br ALIGN="LEFT"/>minimum_length : int<br ALIGN="LEFT"/>num_words : NoneType<br ALIGN="LEFT"/>original_alphabets<br ALIGN="LEFT"/>word_length : NoneType<br ALIGN="LEFT"/>word_separator : str<br ALIGN="LEFT"/>|a_little_weirder_than(base_charset)<br ALIGN="LEFT"/>characters_from_set(choices, characters)<br ALIGN="LEFT"/>from_alphabets(alphabets)<br ALIGN="LEFT"/>limited_vocabulary(how_many_characters, include_whitespace)<br ALIGN="LEFT"/>random(freq)<br ALIGN="LEFT"/>tweet()<br ALIGN="LEFT"/>weird_twitter(base_alphabets, alternate_alphabets, mixin_alphabets, how_weird)<br ALIGN="LEFT"/>word(length)<br ALIGN="LEFT"/>words(length)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.GibberishGradient" [color="black", fontcolor="black", label=<{.merged_py_file.GibberishGradient|gradient_method<br ALIGN="LEFT"/>minimum_length : int<br ALIGN="LEFT"/>|words(length)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.GibberishRainbowGradient" [color="black", fontcolor="black", label=<{.merged_py_file.GibberishRainbowGradient|gradient_method<br ALIGN="LEFT"/>minimum_length : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
".merged_py_file.GibberishTable" [color="black", fontcolor="black", label=<{.merged_py_file.GibberishTable|<br ALIGN="LEFT"/>|charset_from_alphabets(alphabets)<br ALIGN="LEFT"/>choice(freq)<br ALIGN="LEFT"/>choice_among_alphabets(alphabets)<br ALIGN="LEFT"/>choice_among_charsets(charsets)<br ALIGN="LEFT"/>combination_of_alphabets(alphabets, num)<br ALIGN="LEFT"/>weird_twitter(base, weird, mixins, word_length, weird_multiplier)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.GlyphNames" [color="black", fontcolor="black", label=<{.merged_py_file.GlyphNames|inverse : dict<br ALIGN="LEFT"/>|matching(exp)<br ALIGN="LEFT"/>names(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.Item" [color="black", fontcolor="black", label=<{.merged_py_file.Item|DATE_FORMAT : str<br ALIGN="LEFT"/>MEDIA_TYPE : NoneType<br ALIGN="LEFT"/>files<br ALIGN="LEFT"/>identifier<br ALIGN="LEFT"/>item<br ALIGN="LEFT"/>metadata<br ALIGN="LEFT"/>|date(field)<br ALIGN="LEFT"/>modified_query(query, collection)<br ALIGN="LEFT"/>recent(query, cutoff, fields, sorts, page)<br ALIGN="LEFT"/>search(query, collection, fields, sorts)<br ALIGN="LEFT"/>session(set_to)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.LimitedModifierGibberish" [color="black", fontcolor="black", label=<{.merged_py_file.LimitedModifierGibberish|modifiers : str<br ALIGN="LEFT"/>other_generator<br ALIGN="LEFT"/>|tweet()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.MarkovGenerator" [color="black", fontcolor="black", label=<{.merged_py_file.MarkovGenerator|beginnings : list<br ALIGN="LEFT"/>chain<br ALIGN="LEFT"/>generate<br ALIGN="LEFT"/>max : int<br ALIGN="LEFT"/>ngrams : dict<br ALIGN="LEFT"/>order : int<br ALIGN="LEFT"/>|add(text)<br ALIGN="LEFT"/>assemble()<br ALIGN="LEFT"/>concatenate(source)<br ALIGN="LEFT"/>load(f, order, max)<br ALIGN="LEFT"/>loadlines(f, order, max)<br ALIGN="LEFT"/>modify(token)<br ALIGN="LEFT"/>tokenize(text)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.Mirror" [color="black", fontcolor="black", label=<{.merged_py_file.Mirror|horizontal : dict<br ALIGN="LEFT"/>left_right : str<br ALIGN="LEFT"/>top_bottom : str<br ALIGN="LEFT"/>vertical : dict<br ALIGN="LEFT"/>|potentials()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.MirroredMosaicGibberish" [color="black", fontcolor="black", label=<{.merged_py_file.MirroredMosaicGibberish|alphabet : NoneType, str<br ALIGN="LEFT"/>|tweet()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.ModifierGradientGibberish" [color="black", fontcolor="black", label=<{.merged_py_file.ModifierGradientGibberish|a1<br ALIGN="LEFT"/>a2<br ALIGN="LEFT"/>minimum_length : int<br ALIGN="LEFT"/>|words(length)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.Mosaic" [color="black", fontcolor="black", label=<{.merged_py_file.Mosaic|cells : list<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|<I>from_template</I>(template, mapping)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.MosaicGibberish" [color="black", fontcolor="black", label=<{.merged_py_file.MosaicGibberish|can_truncate : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
".merged_py_file.RosettaStoneGibberish" [color="black", fontcolor="black", label=<{.merged_py_file.RosettaStoneGibberish|SEPARATORS : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
".merged_py_file.SamplerGibberish" [color="black", fontcolor="black", label=<{.merged_py_file.SamplerGibberish|alphabet : NoneType, str<br ALIGN="LEFT"/>per_row : int<br ALIGN="LEFT"/>rows : int<br ALIGN="LEFT"/>total_size<br ALIGN="LEFT"/>|tweet()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.SentenceAssembler" [color="black", fontcolor="black", label=<{.merged_py_file.SentenceAssembler|WHITESPACE<br ALIGN="LEFT"/>|add(item)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.SymmetricalMosaic" [color="black", fontcolor="black", label=<{.merged_py_file.SymmetricalMosaic|cells : list<br ALIGN="LEFT"/>symmetry_list : NoneType<br ALIGN="LEFT"/>wmt : NoneType<br ALIGN="LEFT"/>|choice(need_horizontal_symmetry, need_vertical_symmetry)<br ALIGN="LEFT"/>from_alphabet(alphabet, common_spaces)<br ALIGN="LEFT"/>make_wmt(alphabet, num_spaces)<br ALIGN="LEFT"/>mirror_horizontal(mirror_characters)<br ALIGN="LEFT"/>mirror_string_horizontal(s)<br ALIGN="LEFT"/>mirror_string_vertical(s)<br ALIGN="LEFT"/>mirror_vertical(mirror_characters)<br ALIGN="LEFT"/>populate(height, width, horizontal_symmetry, vertical_symmetry)<br ALIGN="LEFT"/>random_size(max_size, horizontal_symmetry, vertical_symmetry)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.SymmetryList" [color="black", fontcolor="black", label=<{.merged_py_file.SymmetryList|full<br ALIGN="LEFT"/>horizontal<br ALIGN="LEFT"/>vertical<br ALIGN="LEFT"/>|choice(fallback, horizontal, vertical)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.Text" [color="black", fontcolor="black", label=<{.merged_py_file.Text|MEDIA_TYPE : str<br ALIGN="LEFT"/>jp2_url<br ALIGN="LEFT"/>pages<br ALIGN="LEFT"/>reader_image_template : str<br ALIGN="LEFT"/>reader_template : str<br ALIGN="LEFT"/>zip_path_template : str<br ALIGN="LEFT"/>|image_url(page)<br ALIGN="LEFT"/>reader_url(page)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.WordLength" [color="black", fontcolor="black", label=<{.merged_py_file.WordLength|<br ALIGN="LEFT"/>|completely_random()<br ALIGN="LEFT"/>long_words()<br ALIGN="LEFT"/>natural_word_length()<br ALIGN="LEFT"/>random()<br ALIGN="LEFT"/>short_words()<br ALIGN="LEFT"/>ten_characters()<br ALIGN="LEFT"/>twenty_characters()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.WordTokenizer" [color="black", fontcolor="black", label=<{.merged_py_file.WordTokenizer|<br ALIGN="LEFT"/>|itokenize(text)<br ALIGN="LEFT"/>tokenize(text)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"olipy.gibberish.Gibberish" [color="black", fontcolor="black", label=<{olipy.gibberish.Gibberish|can_truncate : bool<br ALIGN="LEFT"/>charset<br ALIGN="LEFT"/>end_with : NoneType<br ALIGN="LEFT"/>minimum_length : int<br ALIGN="LEFT"/>num_words : NoneType<br ALIGN="LEFT"/>original_alphabets<br ALIGN="LEFT"/>word_length : NoneType<br ALIGN="LEFT"/>word_separator : str<br ALIGN="LEFT"/>|a_little_weirder_than(base_charset)<br ALIGN="LEFT"/>characters_from_set(choices, characters)<br ALIGN="LEFT"/>from_alphabets(alphabets)<br ALIGN="LEFT"/>limited_vocabulary(how_many_characters, include_whitespace)<br ALIGN="LEFT"/>random(freq)<br ALIGN="LEFT"/>tweet()<br ALIGN="LEFT"/>weird_twitter(base_alphabets, alternate_alphabets, mixin_alphabets, how_weird)<br ALIGN="LEFT"/>word(length)<br ALIGN="LEFT"/>words(length)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"olipy.gibberish.MosaicGibberish" [color="black", fontcolor="black", label=<{olipy.gibberish.MosaicGibberish|can_truncate : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"olipy.randomness.WanderingMonsterTable" [color="black", fontcolor="black", label=<{olipy.randomness.WanderingMonsterTable|common : list<br ALIGN="LEFT"/>rare : list<br ALIGN="LEFT"/>uncommon : list<br ALIGN="LEFT"/>very_rare : list<br ALIGN="LEFT"/>|add(o, freq)<br ALIGN="LEFT"/>choice(freq)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".merged_py_file.AlternateSpellingGibberish" -> ".merged_py_file.Gibberish" [arrowhead="empty", arrowtail="none"];
".merged_py_file.Audio" -> ".merged_py_file.Item" [arrowhead="empty", arrowtail="none"];
".merged_py_file.BracketMatchingMarkovGenerator" -> ".merged_py_file.MarkovGenerator" [arrowhead="empty", arrowtail="none"];
".merged_py_file.CheatCodeGibberish" -> ".merged_py_file.Gibberish" [arrowhead="empty", arrowtail="none"];
".merged_py_file.CompositeGibberish" -> ".merged_py_file.Gibberish" [arrowhead="empty", arrowtail="none"];
".merged_py_file.EmoticonGibberish" -> ".merged_py_file.Gibberish" [arrowhead="empty", arrowtail="none"];
".merged_py_file.GameBoardGibberish" -> ".merged_py_file.Gibberish" [arrowhead="empty", arrowtail="none"];
".merged_py_file.GibberishGradient" -> ".merged_py_file.Gibberish" [arrowhead="empty", arrowtail="none"];
".merged_py_file.GibberishRainbowGradient" -> ".merged_py_file.GibberishGradient" [arrowhead="empty", arrowtail="none"];
".merged_py_file.GibberishTable" -> "olipy.randomness.WanderingMonsterTable" [arrowhead="empty", arrowtail="none"];
".merged_py_file.LimitedModifierGibberish" -> ".merged_py_file.Gibberish" [arrowhead="empty", arrowtail="none"];
".merged_py_file.MirroredMosaicGibberish" -> "olipy.gibberish.MosaicGibberish" [arrowhead="empty", arrowtail="none"];
".merged_py_file.ModifierGradientGibberish" -> ".merged_py_file.Gibberish" [arrowhead="empty", arrowtail="none"];
".merged_py_file.MosaicGibberish" -> ".merged_py_file.Gibberish" [arrowhead="empty", arrowtail="none"];
".merged_py_file.RosettaStoneGibberish" -> ".merged_py_file.CompositeGibberish" [arrowhead="empty", arrowtail="none"];
".merged_py_file.SamplerGibberish" -> ".merged_py_file.Gibberish" [arrowhead="empty", arrowtail="none"];
".merged_py_file.SentenceAssembler" -> ".merged_py_file.Assembler" [arrowhead="empty", arrowtail="none"];
".merged_py_file.SymmetricalMosaic" -> ".merged_py_file.Mosaic" [arrowhead="empty", arrowtail="none"];
".merged_py_file.Text" -> ".merged_py_file.Item" [arrowhead="empty", arrowtail="none"];
"olipy.gibberish.MosaicGibberish" -> "olipy.gibberish.Gibberish" [arrowhead="empty", arrowtail="none"];
".merged_py_file.WordTokenizer" -> ".merged_py_file.EbooksQuotes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="TOKENIZER", style="solid"];
}
